library(igraph)
opinions <- read.table("soc-Epinions1_adj.tsv", header = FALSE, col.names = c("from", "to", "edges"), sep = "\t")
opinions$edges <- NULL
table_as
table_as_df <- as.data.frame.matrix(table)
library(igraph)
opinions <- read.table("soc-Epinions1_adj.tsv")
optab <- as.matrix(opinions)
v1 <- optab [,1]
v2 <- optab[,2]
v3 <- optab [,3]
relations <- data.frame(from=v1, to=v2)
g <- graph_from_data_frame(relations, directed= TRUE)
g
wc<-walktrap.community(g)
plot(wc, g, vertex.size=5, edge.arrow.size=0.1, layout=layout.fruchterman.reingold)
plot(wc, g, vertex.size=5, vertex.label.cex=0.5, edge.arrow.size=0.1, layout=layout.fruchterman.reingold)
plot(wc, g, vertex.size=5, vertex.label.cex=0.5, edge.arrow.size=0.1, layout=layout.fruchterman.reingold)
plot(wc, g, vertex.size=5, vertex.label.cex=0.01, edge.arrow.size=0.1, layout=layout.fruchterman.reingold)
plot(wc, g, vertex.size=5, vertex.label.cex=0.1, edge.arrow.size=0.1, layout=layout.fruchterman.reingold)
class(g.adj)
g.adj= igraph::get.adjacency(g)
g.adj
class(g.adj)
g.density= gden(g.adj)
library(sna)
g.density= gden(g.adj)
.adj
class(g.adj)
g.density= gden(relations)
g.density
gden(relations)
graph.density(relations)
graph.density(g)
g.ego= ego.extract(g)
g.ego= ego.extract(relations)
g.ego= ego.extract(relations)
egooo= ego.extract(relations)
install.packages("igraph")
library(igrapj)
library(igrap)
library(igraph)
sg_duplicate <- induced.subgraph(g_duplicate, which(V(g_duplicate) weight > 2.2))
g <- graph_from_data_frame(relations, directed= TRUE)
g_duplicate <- g
g <- graph_from_data_frame(relations, directed= TRUE)
g_duplicate <- g
sg_duplicate <- induced.subgraph(g_duplicate, which(V(g_duplicate) weight > 2.2))
sg_duplicate <- induced.subgraph(g_duplicate, which(V(g_duplicate)$weight > 2.2))
View(sg_duplicate)
g <- graph_from_data_frame(relations, directed= TRUE)
g_duplicate <- g
E(g_duplicate)Sweight <- rnorm(ecount(g_duplicate))
E(g_duplicate)$weight <- rnorm(ecount(g_duplicate))
V(g_duplicate)$weight <- rnorm(vcount (g_duplicate))
sg_duplicate <- induced.subgraph(g_duplicate, which(V(g_duplicate)$weight > 2.2))
sg = induced_subgraph(mygraph, which(components(mygraph)$membership == 1))
sg = induced_subgraph(mygraph, which(components(g)$membership == 1))
sg = induced_subgraph(g, which(components(g)$membership == 1))
V(sg)$degree = degree(sg)
result = dfs(sg, root = 1, dist = TRUE)$dist
result
V(g)$degree = degree(g)
sg = induced.subgraph(mygraph, which(V(mygraph)$degree > 50))
sg = induced.subgraph(g, which(V(g)$degree > 50))
vcount(sg)
max_cliques(sg)
clique_num(sg)
largest_cliques(sg)
count_max_cliques(sg)
new_graph = delete.vertices(g, which(degree(g) < 300))
result = power_centrality(g, rescale = TRUE)
sg = induced_subgraph(9, which(components (g) $membership == 1))
g <- graph_from_data_frame(relations, directed= TRUE)
sg = induced_subgraph(9, which(components (g) $membership == 1))
V(sg)$degree = degree(sg)
sg = induced.subgraph(g, which(V(g)$degree > 50))
sg = induced_subgraph(9, which(components (g) $membership == 1))
sg = induced_subgraph(g, which(components (g) $membership == 1))
V(sg)$degree = degree(sg)
result = dfs(sg, root = 1, dist = TRUE)$dist
sort(result)
sort(result, decreasing=TRUE)
sg = induced_subgraph(g, which(components (g) $membership == 1))
V(sg)$degree = degree(sg)
result = dfs(sg, root = 1, dist = TRUE)$dist
sort(result, decreasing= TRUE)
save.image("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Study/Big Data Analytics/Class Project 1/classproject1/Untitled.RData")
V(g)$degree = degree(g)
sg = induced.subgraph(mygraph, which(V(mygraph)$degree > 50))
sg = induced.subgraph(mygraph, which(V(g)$degree > 50))
sg = induced.subgraph(g, which(V(g)$degree > 50))
largest_clique(sg)
largest_cliques(sg)
sg = induced.subgraph(g, which(V(g)$degree > 100))
largest_cliques(sg)
sg = induced.subgraph(g, which(V(g)$degree > 10))
largest_cliques(sg)
sg = induced.subgraph(g, which(V(g)$degree > 0))
largest_cliques(sg)
largest_cliques(g)
V(g)$degree = degree(g)
sg = induced.subgraph(g, which(V(g)$degree > 50))
vcount(sg)
max_cliques(sg)
largest_clique <- largest_cliques(mygraph)
largest_clique <- largest_cliques(g)
min_degree <- min(degree(g[largest_clique]))
min_degree <- min(degree(relations[largest_clique]))
min_degree <- min(degree(g[largest_clique]))
sg = induced.subgraph(g, which(V(g)$degree > 22))
max_cliques(sg)
acsg_duplicate <- alpha_centrality(sg_duplicate)
sort(acsg_duplicate, decreasing= TRUE)
g.between <- igraph:: centr_betw(g)
g.between
sort(g.between, decreasing=TRUE)
class(g)
class(g.between)
class(result)
sort( as.numeric(unlist(g.between)), decreasing=TRUE)
most_central <- which.max(degree(g, mode="all"))
most_central
most_central <- which.max(g.between)
bet <- betweenness(g)
most_central <- which.max(bet)
most_central
save.image("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Study/Big Data Analytics/Class Project 1/classproject1/Project1GraphAnalytics.RData")
