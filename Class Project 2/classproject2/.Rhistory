save.image("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Study/Big Data Analytics/Class Project 2/classproject2/classproject2.RData")
auto<-read.table("g:/auto-mpg.data", stringsAsFactors = FALSE)
auto<-read.table("auto-mpg.names", stringsAsFactors = FALSE)
auto<-read.table("g:/auto-mpg.names", stringsAsFactors = FALSE)
library(igraph)
auto<- read.table("auto-mpg.data", stringsAsFactors = FALSE)
auto [1:10, 1:9]
auto.names = c("mpg", "cyl", "disp", "hp", "weight", "accel", "year", "origin", "car")
auto.names
str(auto)
str(auto.names)
carnames <-auto[,9]
auto
carnames
names(auto) <-auto.names
auto[1:10, 1:7]
auto.names
auto[1:10, 1:9]
auto[1:10, 1:10]
auto.df <- auto[, 1:7]
auto.df[1:10, 1:7]
auto2 <-auto.df
auto2$hp <- as.numeric(auto2$hp)
auto2$hp[1:10]
summary(auto2)
auto.na<- na.omit(auto2)
str(auto.na)
install.packages("sna")
install.packages("igraph")
install.packages("igraph")
install.packages("psych")
library(sna)
library(psych)
describe(auto.na)
plot(auto.na)
auto.na2<- auto.na[,1:6]
plot(auto.na2)
normalize <- function(x) {((x-min(x))/(max(x)-min(x))}
normalize <- function(x){((x-min(x))/(max(x)-min(x))}
normalize <- function(x){((x-min(x))/(max(x)-min(x)))}
normalize
auto.norm ,- as.data.frame(lapply(auto.na2[,1:6], normalize))
auto.norm <- as.data.frame(lapply(auto.na2[,1:6], normalize))
auto.norm[1:10,]
auto.na2[1:10,]
auto.na2.mpg <-min(auto.na2$mpg)
auto.na2.mpg
auto.na2.disp<-min(auto.na2$disp)
auto.na2.disp
auto.na2.max.mpg<-max(auto.na2$mpg)
auto.na2.max.mpg
auto.na2.max.disp<-max(auto.na2$disp)
auto.na2.max.disp
mpg <- 0.2393617*(auto.na2.max.mpg- auto.na2.mpg) + auto.na2.mpg
mpg
zscore<-function(x){(x-mean(x))/sd(x)}
zscore(c(10,20,30,40,50))
auto.znorm<-as.data.frame(lapply(auto.na2[, 1:6], scale))
auto.znorm[1:10,]
auto.norm[1:10,]
install.packages("corrplot")
library(corrplot)
autocor <- cor(auto.na)
autocor
plot(autocor)
plot(autocor)
autocor
plot(autocor)
plot(autocor, col = rainbow(length(autocor)))
search()
detach(igraph)
detach("package:igraph", unload = TRUE)
search()
plot(autocor)
library(igraph)
igraph::plot(autocor)
plot(autocor)
corrplot::corrplot(autocor)
auto.k2<-kmeans(auto.norm, centers=2)
str(auto.k2)
auto.k2
install.packages("factoextra")
install.packages("factoextra")
library(factoextra)
install.packages("ggplot2")
library(factoextra)
library(ggplot2)
install.packages("rlang")
install.packages("rlang")
library(factoextra)
library(ggplot2)
search()
remove.packages(rlang)
remove.packages("rlang")
library(factoextra)
library(rlang)
install.packages("rlang")
install.packages("rlang")
sessionInfo()
search()
library(sna)
library(psych)
library(factoextra)
factoextra::fviz_cluster(auto.k2, auto.norm)
factoextra::fviz_cluster(auto.k2, auto.norm, palette = "Set2", ggtheme = theme_minimal())
extract_cluster1 <- function(kmeans_obj) {
cluster_assignments <- kmeans_obj$cluster
cluster1_indices <- which(cluster_assignments == 1)
return(kmeans_obj$dat[cluster1_indices, ])
}
extract_cluster1(auto.k2)
extract_cluster1(auto.k2)
auto.k3 <- kmeans(auto.norm, centers=3)
auto.k3
factoextra::fviz_cluster(auto.k3, auto.norm, palette = "Set2", ggtheme = theme_minimal())
factoextra::fviz_cluster(auto.k3, auto.norm)
auto.k4 <- kmeans(auto.norm, centers=4)
auto.k4
factoextra::fviz_cluster(auto.k4, auto.norm)
auto.na2.k4$centers
auto.k4$clusters
auto.k3$clusters
auto.k2$clusters
View(auto.k4)
auto.k4
auto.k4.centers
auto.k4$centers
View(auto.k4)
auto.k5<-kmeans(auto.norm, centers=5)
auto.k5
factoextra::fviz_cluster(auto.k5, auto.norm)
auto.k6<-kmeans(auto.norm, centers=6)
auto.k6
factoextra::fviz_cluster(auto.k6, auto.norm)
auto.k7<-kmeans(auto.norm, centers=7)
auto.k7
wssplot <- function(data, nc=15, seed=1234)
{
wss<- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc)
{
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
plot(1:nc, wss, type="b",
xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wssplot(auto.na2, nc=4, seed=12324)
factoextra::fviz_nbclust(auto.na2, FUNcluster = kmeans, method="wss", k.max=10, verbose=TRUE)
search()
library(sna)
library(psych)
library(factoextra)
factoextra::fviz_cluster(auto.k4,auto.norm)
factoextra::fviz_cluster(auto.k6,auto.norm)
auto.k6
wssplot (auto.na2, nc=4, seed=12324))
wssplot (auto.na2, nc=4, seed=12324)
factoextra::fviz_nbclust(auto.na2,FUNcluster=kmeans,method="wss",k.max=10,verbose=TRUE)
auto.norm.rows= nrow(auto.norm)
auto.norm.sample= 0.7
auto.rows= auto.norm.sample * auto.norm.rows
auto.rows
auto.train.index= sample(auto.norm.rows, auto.rows)
length(auto.train.index)
auto.train = auto.norm[auto.train.index, ]
auto.train[1:20,]
auto.test= auto.norm[-auto.train.index,]
auto.test[1:20,]
auto.train.k4= kmeans(auto.train, centers=4)
auto.train.k4
install.packages("class")
library(class)
auto.test.k4= knn(auto.train, auto.test, auto.train.k4$cluster, k=4)
auto.test.k4
auto.test.kmeans.k4= knn(auto.train, auto.test, auto.train.k4$cluster, k=4)
auto.test.kmeans.k4= kmeans(auto.test, centers=4)
auto.test.kmeans.k4
auto.test.k4.labels= auto.test.kmeans.k4$cluster
length(auto.test.k4.labels)
auto.test.k4.labels
auto.test.k4
auto.train.glm= glm(formula= auto.train$mpg~auto.train$disp+ auto.train$hp+ auto.train$weight + auto.train$accel + auto.train$cyl, family=gaussian, data=auto.train)
summary(auto.train.glm)
auto.train.glm.anova= anova(auto.train.glm, test="Chisq")
auto.train.glm.annova
auto.train.glm.anova
plot(auto.train.glm)
plot(auto.train.glm)
auto.test.pred= predict(auto.train.glm, newdata=auto.tst)
auto.test.pred= predict(auto.train.glm, newdata=auto.test)
auto.test.pred
summary(auto.test.pred)
confint(auto.train.glm)
auto.test.pred.k4= kmeans(auto.test.pred, centers=4)
auto.test.pred.k4
library(gmodels)
auto.test.ct.k4= CrossTable(auto.test.pred.k4$cluster, auto.test.kmeans.k4$cluster, prop.chisq = TRUE)
auto.test.pred = predict(auto.train.glm, newdata=na.omit(auto.test))
auto.test.pred <- predict(auto.train.glm, newdata = auto.test[!is.na(auto.test[, "response_variable"]), ])
auto.test.pred <- predict(auto.train.glm, newdata = auto.test[!is.na(auto.test[, "Rings"]), ])
auto.test.ct.k4= CrossTable(auto.test.pred.k4$cluster, auto.test.kmeans.k4$cluster, prop.chisq = TRUE)
auto.test.ct.k4= CrossTable(auto.test.pred.k4$cluster, auto.test.kmeans.k4$cluster, prop.chisq = TRUE)
auto.test.pred = predict(auto.train.glm, newdata=na.omit(auto.test))
length(auto.test.pred)
na.omit(auto.test.pred)
x<- na.omit(auto.test.pred)
length(x)
auto.train.glm= glm(formula= mpg~disp+ hp+ weight + accel + cyl, family=gaussian, data=auto.train)
auto.test.pred= predict(auto.train.glm, newdata=auto.test)
length(auto.test.pred)
